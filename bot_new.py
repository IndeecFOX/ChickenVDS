from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
import asyncio
import aiohttp
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "TOKEN"
CHAT_ID = "-1002377841002"
CHANNEL_ID = "-1002424283274"
THREAD_ID = "769"
NOTIFY_THREAD_ID = "12130"  # ID –ø–æ—Ç–æ–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö
API_URL = "https://hostvds.com/api/regions/"

CITY_FLAGS = {
    "Hong-kong": "üá≠üá∞"    ,
    "Hel": "üá´üáÆ"    ,
    "Kansas": "üá∫üá∏"    ,
    "Paris": "üá´üá∑"    ,
    "Amsterdam": "üá≥üá±"    ,
    "Silicon-valley": "üá∫üá∏"    ,
    "Dallas": "üá∫üá∏"    ,
    "Del": "üáÆüá≥"    ,
    "Riga": "üá±üáª"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

async def fetch_plans(session, region_code):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."""
    async with session.get(f"https://hostvds.com/api/plans/?region={region_code}") as response:
        return await response.json()

async def fetch_regions():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤."""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(API_URL) as response:
                data = await response.json()

            available_locations = {}
            has_unlimited = False  # –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤

            for region in data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω–∞
                if region.get("is_available") and not region.get("is_out_of_stock"):
                    region_code = region['region']
                    plans_data = await fetch_plans(session, region_code)

                    city_name = region['city_code'].capitalize()
                    flag = CITY_FLAGS.get(city_name, '')

                    # –°–æ–±–∏—Ä–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
                    price_lines = []
                    target_prices = [0.99, 1.99, 3.99]
                    has_available_plans = False
                    has_highfreq_shared_available = False

                    standard_plans = []
                    highfreq_shared_plans = []

                    for price in target_prices:
                        for kind in ["standard", "highfreq_shared"]:
                            matching_plan = next(
                                (plan for plan in plans_data if plan.get("monthly") == price and plan.get("kind") == kind),
                                None
                            )
                            if matching_plan:
                                status = "‚úÖ" if not matching_plan.get("is_out_of_stock") else "‚ùå"
                                currency_symbol = "‚Ç¨" if city_name == "Kansas" else "$"
                                price_line = f"{currency_symbol}{price}/–º–µ—Å {status}"
                                if kind == "standard":
                                    standard_plans.append(price_line)
                                    has_available_plans = has_available_plans or status == "‚úÖ"
                                elif kind == "highfreq_shared":
                                    highfreq_shared_plans.append(price_line)
                                    if status == "‚úÖ":
                                        has_highfreq_shared_available = True
                                        has_unlimited = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤

                    if standard_plans:
                        price_lines.extend(standard_plans)
                    if highfreq_shared_plans:
                        price_lines.append("‚ôæÔ∏è Unlimited:")
                        price_lines.extend(highfreq_shared_plans)

                    if has_available_plans:
                        location_name = f"{flag} {city_name}"
                        if has_highfreq_shared_available:
                            location_name += " (+Unlimited_HF‚≠ê ‚àû)"

                        available_locations[location_name] = price_lines

            return available_locations, has_unlimited
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}, False

async def check_servers():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    previous_locations = {}
    has_unlimited_previous = False

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await bot.send_message(
        chat_id=CHAT_ID,
        message_thread_id=THREAD_ID,
        text="–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω. Fix –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–µ–∑–ª–∏–º–∏—Ç–µ (10.02). Created by: bank. With code support by: Fatyzzz."
    )

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    if CHANNEL_ID:
        await bot.send_message(CHANNEL_ID, "Made by Fatyzzz for Z4R. –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 2 –º–∏–Ω—É—Ç—ã")

    while True:
        try:
            current_locations, has_unlimited = await fetch_regions()
            if current_locations != previous_locations:
                previous_locations = current_locations
                if current_locations:
                    message = "üåé –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:\n\n"
                    for location, prices in current_locations.items():
                        has_available = any("‚úÖ" in price for price in prices)
                        status_circle = " " if has_available else "üî¥"
                        message += f"{location} {status_circle}\n"

                    message += "\nüíµ –ù–∞–ª–∏—á–∏–µ –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:\n<blockquote expandable>"
                    for location, prices in current_locations.items():
                        message += f"\n{location}\n{chr(8226)} " + f"\n{chr(8226)} ".join(prices) + "\n"
                    message += "</blockquote>"
                else:
                    message = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–ª–∏ —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –æ—Ç DDOS)."

                await bot.send_message(
                    chat_id=CHAT_ID,
                    message_thread_id=THREAD_ID,
                    text=message,
                    parse_mode=ParseMode.HTML
                )

                if CHANNEL_ID:
                    await bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=message,
                        parse_mode=ParseMode.HTML
                    )

            if has_unlimited and not has_unlimited_previous:
                await bot.send_message(
                    chat_id=CHAT_ID,
                    message_thread_id=NOTIFY_THREAD_ID,
                    text="–ï—Å—Ç—å –±–µ–∑–ª–∏–º–∏—Ç!"
                )
            has_unlimited_previous = has_unlimited

            await asyncio.sleep(60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(5)

async def main():
    await check_servers()

if __name__ == "__main__":
    asyncio.run(main())
