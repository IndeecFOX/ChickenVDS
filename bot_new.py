from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
import asyncio
import aiohttp
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "TOKEN"
CHAT_ID = "-1002377841002"
CHANNEL_ID = "-1002424283274"
THREAD_ID = "769"
API_URL = "https://hostvds.com/api/regions/"

CITY_FLAGS = {
    "Hong-kong": "üá≠üá∞"  ,
    "Hel": "üá´üáÆ"  ,
    "Kansas": "üá∫üá∏"  ,
    "Paris": "üá´üá∑"  ,
    "Amsterdam": "üá≥üá±"  ,
    "Silicon-valley": "üá∫üá∏"  ,
    "Dallas": "üá∫üá∏"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

async def fetch_plans(session, region_code):
    async with session.get(f"https://hostvds.com/api/plans/?region={region_code}") as response:
        return await response.json()

async def fetch_regions():
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(API_URL) as response:
                data = await response.json()

            available_locations = {}
            for region in data:
                if not region.get("is_out_of_stock"):
                    region_code = region['region']
                    plans_data = await fetch_plans(session, region_code)

                    city_name = region['city_code'].capitalize()
                    flag = CITY_FLAGS.get(city_name, '')

                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
                    price_lines = []
                    target_prices = [0.99, 1.99, 3.99]
                    has_available_plans = False

                    for price in target_prices:
                        matching_plan = next((plan for plan in plans_data if plan.get("monthly") == price), None)
                        if matching_plan:
                            status = "‚úÖ" if not matching_plan.get("is_out_of_stock") else "‚ùå"
                            if status == "‚úÖ":
                                has_available_plans = True
                            price_line = f"${price}/–º–µ—Å {status}"
                            price_lines.append(price_line)

                    if has_available_plans:
                        available_locations[f"{flag} {city_name}"] = price_lines

            return available_locations
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}

async def check_servers():
    previous_locations = {}

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await bot.send_message(
        chat_id=CHAT_ID,
        message_thread_id=THREAD_ID,
        text="–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω. Created by: bank. Upgraded code by Fatyzzz specialy for Z4R."
    )

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    if CHANNEL_ID:
        await bot.send_message(CHANNEL_ID, "Made by Fatyzzz for Z4R. –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 2 –º–∏–Ω—É—Ç—ã")

    while True:
        try:
            current_locations = await fetch_regions()
            if current_locations != previous_locations:
                previous_locations = current_locations
                if current_locations:
                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message = "üåé –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:\n\n"

                    # –°–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
                    for location, prices in current_locations.items():
                        has_available = any("‚úÖ" in price for price in prices)
                        status_circle = " " if has_available else "üî¥"
                        message += f"{location} {status_circle}\n"

                    message += "\nüíµ –ù–∞–ª–∏—á–∏–µ –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:"
                    # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–π –±–ª–æ–∫ —Å–æ –≤—Å–µ–º–∏ –ª–æ–∫–∞—Ü–∏—è–º–∏
                    message += "\n<blockquote expandable>"
                    for location, prices in current_locations.items():
                        message += f"\n{location}\n{chr(8226)} " + f"\n{chr(8226)} ".join(prices) + "\n"
                    message += "</blockquote>"
                else:
                    message = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç —Å thread_id
                await bot.send_message(
                    chat_id=CHAT_ID,
                    message_thread_id=THREAD_ID,
                    text=message,
                    parse_mode=ParseMode.HTML
                )

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
                if CHANNEL_ID:
                    await bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=message,
                        parse_mode=ParseMode.HTML
                    )

            await asyncio.sleep(120)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(5)

async def main():
    await check_servers()

if __name__ == "__main__":
    asyncio.run(main())
